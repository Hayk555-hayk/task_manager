let codeTitle = 'Learn to programm crafting quality code';

let codeTutorial = `
    <b><a href='https://refactoring.guru/ru/smells/large-class'>Рефакторинг гуру</a></b><br/>
    Рефакторинг — это, в первую очередь, превращение грязного кода в чистый. Чистый код проходит все тесты, очевиден для других программистов<br/>
    не содержит дублирования, содержит минимум классов и других движущихся частей, легче и дешевле поддерживать!<br/>
    Проблемы с кодом<br/>
    Long Method - Метод содержит слишком большое число строк кода. Длина метода более десяти строк должна начинать вас беспокоить.<br/>
    Large Class - Класс содержит множество полей/методов/строк кода.<br/>
    Primitive Obsession - Использование элементарных типов вместо маленьких объектов для небольших задач (например, валюта, диапазоны, специальные строки для телефонных номеров и т. п.)<br/>
    Использование констант для кодирования какой-то информации (например, константа USER_ADMIN_ROLE = 1 для обозначения пользователей с ролью администратора).<br/>
    Использование строковых констант в качестве названий полей в массивах.<br/>
    Long Parameter List - Количество параметров метода больше трёх-четырёх.<br/>
    Data Clumps - Иногда в разных частях кода встречаются одинаковые группы переменных (например, параметры подключения к базе данных). Такие группы следует превращать в самостоятельные классы.<br/>
    Следует придерживаться такого правила: если ощущается необходимость что-то прокомментировать внутри метода,<br/>
    этот код лучше выделить в новый метод. Даже одну строку имеет смысл выделить в метод, если она нуждается в разъяснениях.<br/>
    К тому же, если у метода хорошее название, то не нужно будет смотреть в его код, чтобы понять, что он делает.<br/>
    Условные операторы и циклы свидетельствуют о возможности выделения кода в отдельный метод. Для работы с условными выражениями<br/>
    подходит декомпозиция условных операторов. Для работы с циклом — извлечение метода.<br/>
`