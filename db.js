const main_data = {
    php: [
        1,2,3
    ],
    laravel: [
        4,5,6
    ],
    ruby: [
        `Ruby относительно новый язык, разработан Екихиро Мацумото в 1995 году <br/>
        Ruby считается удобным для программирования язык<br/>
        Это дружественный для программиста язык, в нем есть множество методов которые имеют свои синонимы<br/>
        Например подсчет элементов в массиве size, length<br/>
        Восклицательный знак в конце метода озночает модификацию и изменение сущности над которым был вызван сей метод<br/>
        В Ruby есть аналог конструктора класса но благодаря зборщику мусора нет деструктора<br/>
        Обьект считается экземпляром класса (создание обьекта от экземпляра класса инстанцированием)<br/>
        В Ruby запрешена множнственная наследование<br/>
        Полиморфоз способность применять разные формы и изменять обличие, в каждом подклассе метод радительского класса может быть переопределен,<br/>
        Абстрактный класс это класс от которого можно наследовать но создавать экземпляры этого класса не возможно в ruby абстрактных классов нет<br/>
        Полный перечень ключевых слов в Ruby <img src="./assets/ruby/1.png" />
        Имена глобальных переменных начинаются со знака $<br/>
        Имена переменноы пренадлежащей обьекту начинаются со знака @<br/>
        Имена переменной пренадлежащей классу начинаются со знаком @@<br/>
        Коментарии начинаются со знака решетки
        <img src="./assets/ruby/2.png" />`,
        `Все массивы это экземпляры класса Array
        <img src="./assets/ruby/3.png" />
        Ассоциативные массивы в Ruby называются хешами
        <img src="./assets/ruby/4.png" />
        В Ruby логически ложно вычисляются только nil и false<br/>
        В Ruby кроме if есть еще и unless который работает по противоположной логике
        <img src="./assets/ruby/5.png" />
        switch case в ruby это case when
        <img src="./assets/ruby/6.png" />
        Пример всех циклов в Ruby
        <img src="./assets/ruby/7.png" />
        <img src="./assets/ruby/8.png" />`,
        `Вывод ошибок try/catch выполняется обератором begin/rescue
        <img src="./assets/ruby/9.png" />
        <img src="./assets/ruby/10.png" />`,
        `В Ruby числа, строки регулярные выражения и другие сущности являются обьектами (веть у них есть свои методы)<br/>
        <img src="./assets/ruby/11.png" />
        Определение и использование класса в Ruby
        <img src="./assets/ruby/12.png" />
        Пример класса и ооп в ruby
        <img src="./assets/ruby/13.png" />
        <img src="./assets/ruby/14.png" />
        Здесь видны классические setter и getter но в Ruby есть более удобный способ установления setter и getter<br/>
        есть методы attr, attr_accessor, attr_reader и attr_writer<br/>
        В выше упомянутом классе можно все 3 метода заменить одной строкой attr_accessor :myvar<br />
        Для управления видимостью методов класса есть модификаторы private, protected и public
        <img src="./assets/ruby/15.png" />
        По умолчанию все методы класса кроме initialize являются открытыми`,
        `<img src="./assets/ruby/16.png" />
        Тип переменной можно определит методом var_name.class, метод is_a позволяет проверить принадлежность к классу
        <img src="./assets/ruby/17.png" />
        Полный перечень методов можно получить вызвав var_name.methods имеются так же и var_name.private_instance_methods var_name.public_instance_methods<br/>
        В классе object есть superclass который возвращает суперкласс обьекта или nil<br/>
        При вызове метода Ruby ишет их в синглетных методах, матоды определенные в классе object, методы определенные в предках класса<br/>
        Сборщик мусора удаляет обьект на который нет ссылок<br />
        Вызов метода можно выполнить со скобками или без foobar(5) или foobar 5 но hash в качестве аргумента следует ввести в скобки<br/>
        Диапазон чисел в switch case можно проверить следующим образом
        <img src="./assets/ruby/18.png" />`,
    ],
    rails: [

    ],
    js: [

    ],
    node: [

    ],
    nest: [

    ],
    devops: [

    ],
    pattern: [

    ],
    sql: [

    ],
    git: [

    ],
}